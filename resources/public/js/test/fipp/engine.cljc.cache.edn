{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name fipp.engine, :imports nil, :requires {s clojure.string, clojure.string clojure.string, deque fipp.deque, fipp.deque fipp.deque}, :cljs.spec/speced-vars [], :uses nil, :defs {serialize-node {:name fipp.engine/serialize-node, :file "resources/public/js/test/fipp/engine.cljc", :line 10, :column 1, :end-line 10, :end-column 25, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/engine.cljc", :line 10, :column 11, :end-line 10, :end-column 25}, :tag cljs.core/MultiFn}, serialize {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/engine.cljc", :line 12, :column 7, :end-line 12, :end-column 16, :arglists (quote ([doc]))}, :name fipp.engine/serialize, :variadic false, :file "resources/public/js/test/fipp/engine.cljc", :end-column 16, :method-params ([doc]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([doc]))}, annotate-rights {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/engine.cljc", :line 68, :column 7, :end-line 68, :end-column 22, :arglists (quote ([rf])), :doc "A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout."}, :name fipp.engine/annotate-rights, :variadic false, :file "resources/public/js/test/fipp/engine.cljc", :end-column 22, :method-params ([rf]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([rf])), :doc "A transducer which annotates the right-side of nodes assuming a\n  hypothetical single-line formatting of the document. Groups and indentation\n  directives are temporarily assumed to be zero-width. These values are used\n  by subsequent passes to produce the final layout."}, update-right {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/engine.cljc", :line 89, :column 7, :end-line 89, :end-column 19, :arglists (quote ([deque f & args])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(deque f args)], :arglists ([deque f & args]), :arglists-meta (nil)}}, :name fipp.engine/update-right, :variadic true, :file "resources/public/js/test/fipp/engine.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(deque f args)], :arglists ([deque f & args]), :arglists-meta (nil)}, :method-params [(deque f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists ([deque f & args])}, annotate-begins {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/engine.cljc", :line 92, :column 7, :end-line 92, :end-column 22, :arglists (quote ([{:keys [width], :as options}])), :doc "Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes."}, :name fipp.engine/annotate-begins, :variadic false, :file "resources/public/js/test/fipp/engine.cljc", :end-column 22, :method-params ([p__10895]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [width], :as options}])), :doc "Given printing options, returns a transducer which annotate the right-side\n  of groups on their :begin nodes.  This includes the pruning algorithm which\n  will annotate some :begin nodes as being :too-far to the right without\n  calculating their exact sizes."}, format-nodes {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/engine.cljc", :line 164, :column 7, :end-line 164, :end-column 19, :arglists (quote ([{:keys [width], :as options}])), :doc "Given printing options, returns a transducer which produces the fully\n  laid-out strings."}, :name fipp.engine/format-nodes, :variadic false, :file "resources/public/js/test/fipp/engine.cljc", :end-column 19, :method-params ([p__10904]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [width], :as options}])), :doc "Given printing options, returns a transducer which produces the fully\n  laid-out strings."}, pprint-document {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/engine.cljc", :line 234, :column 7, :end-line 234, :end-column 22, :arglists (quote ([document options]))}, :name fipp.engine/pprint-document, :variadic false, :file "resources/public/js/test/fipp/engine.cljc", :end-column 22, :method-params ([document options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 2, :fn-var true, :arglists (quote ([document options]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:nest :align :outdent :group :else :offset :default :terminate :too-far :width :op :node :begin :break :nodes :line :right :escaped :position :pass :end :hierarchy :inline :text :span}, :order [:hierarchy :default :op :text :else :node :pass :escaped :span :line :inline :terminate :break :group :begin :end :nest :offset :outdent :align :right :width :position :nodes :too-far]}, :doc "See: Oleg Kiselyov, Simon Peyton-Jones, and Amr Sabry\n  Lazy v. Yield: Incremental, Linear Pretty-printing"}