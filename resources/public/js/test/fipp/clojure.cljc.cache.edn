{:rename-macros {}, :renames {}, :externs {Error {}}, :use-macros {}, :excludes #{}, :name fipp.clojure, :imports nil, :requires {walk clojure.walk, clojure.walk clojure.walk, v fipp.visit, fipp.visit fipp.visit, edn fipp.edn, fipp.edn fipp.edn}, :cljs.spec/speced-vars [], :uses {visit fipp.visit}, :defs {pretty-bindings {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 136, :column 7, :end-line 136, :end-column 22, :arglists (quote ([p bvec]))}, :name fipp.clojure/pretty-bindings, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 22, :method-params ([p bvec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p bvec]))}, pretty-fn* {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 98, :column 7, :end-line 98, :end-column 17, :arglists (quote ([p [_ params body :as form]]))}, :name fipp.clojure/pretty-fn*, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 17, :method-params ([p p__11034]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [_ params body :as form]]))}, pprint {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 191, :column 7, :end-line 191, :end-column 13, :arglists (quote ([x] [x options])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [x options]), :arglists ([x] [x options]), :arglists-meta (nil nil)}}, :name fipp.clojure/pprint, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([x] [x options]), :arglists ([x] [x options]), :arglists-meta (nil nil)}, :method-params ([x] [x options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 2, :fn-var true, :arglists ([x] [x options])}, pretty-condp {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 41, :column 7, :end-line 41, :end-column 19, :arglists (quote ([p [head pred expr & more]]))}, :name fipp.clojure/pretty-condp, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 19, :method-params ([p p__10985]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [head pred expr & more]]))}, pretty-quote {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 129, :column 7, :end-line 129, :end-column 19, :arglists (quote ([p [macro arg]]))}, :name fipp.clojure/pretty-quote, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 19, :method-params ([p p__11057]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [macro arg]]))}, maybe-a {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 17, :column 7, :end-line 17, :end-column 14, :arglists (quote ([pred xs]))}, :name fipp.clojure/maybe-a, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 14, :method-params ([pred xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred xs]))}, pretty-libspec {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 112, :column 7, :end-line 112, :end-column 21, :arglists (quote ([p [head & clauses]]))}, :name fipp.clojure/pretty-libspec, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 21, :method-params ([p p__11042]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [head & clauses]]))}, pretty-method {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 66, :column 7, :end-line 66, :end-column 20, :arglists (quote ([p [params & body]]))}, :name fipp.clojure/pretty-method, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 20, :method-params ([p p__11000]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [params & body]]))}, pretty-cond-clause {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 23, :column 7, :end-line 23, :end-column 25, :arglists (quote ([p [test result]]))}, :name fipp.clojure/pretty-cond-clause, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 25, :method-params ([p p__10970]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [test result]]))}, block {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 11, :column 7, :end-line 11, :end-column 12, :arglists (quote ([nodes]))}, :name fipp.clojure/block, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 12, :method-params ([nodes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([nodes]))}, pretty-cond {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 34, :column 7, :end-line 34, :end-column 18, :arglists (quote ([p [head & more]]))}, :name fipp.clojure/pretty-cond, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 18, :method-params ([p p__10980]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [head & more]]))}, pretty-fn {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 87, :column 7, :end-line 87, :end-column 16, :arglists (quote ([p [head & more]]))}, :name fipp.clojure/pretty-fn, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 16, :method-params ([p p__11021]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [head & more]]))}, pretty-arrow {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 52, :column 7, :end-line 52, :end-column 19, :arglists (quote ([p [head & stmts]]))}, :name fipp.clojure/pretty-arrow, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 19, :method-params ([p p__10990]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [head & stmts]]))}, default-symbols {:name fipp.clojure/default-symbols, :file "resources/public/js/test/fipp/clojure.cljc", :line 173, :column 1, :end-line 173, :end-column 21, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 173, :column 6, :end-line 173, :end-column 21}, :tag any}, build-symbol-map {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 165, :column 7, :end-line 165, :end-column 23, :arglists (quote ([dispatch]))}, :name fipp.clojure/build-symbol-map, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 23, :method-params ([dispatch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dispatch]))}, pretty-reify {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 158, :column 7, :end-line 158, :end-column 19, :arglists (quote ([p [head & opts+specs]]))}, :name fipp.clojure/pretty-reify, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 19, :method-params ([p p__11084]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [head & opts+specs]]))}, pretty-let {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 141, :column 7, :end-line 141, :end-column 17, :arglists (quote ([p [head bvec & body]]))}, :name fipp.clojure/pretty-let, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 17, :method-params ([p p__11075]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [head bvec & body]]))}, pretty-type {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 154, :column 7, :end-line 154, :end-column 18, :arglists (quote ([p [head fields & opts+specs]]))}, :name fipp.clojure/pretty-type, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 18, :method-params ([p p__11080]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [head fields & opts+specs]]))}, pretty-if {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 58, :column 7, :end-line 58, :end-column 16, :arglists (quote ([p [head test & more]]))}, :name fipp.clojure/pretty-if, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 16, :method-params ([p p__10995]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [head test & more]]))}, pretty-defn {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 71, :column 7, :end-line 71, :end-column 18, :arglists (quote ([p [head fn-name & more]]))}, :name fipp.clojure/pretty-defn, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 18, :method-params ([p p__11006]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [head fn-name & more]]))}, pretty-ns {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 117, :column 7, :end-line 117, :end-column 16, :arglists (quote ([p [head ns-sym & more]]))}, :name fipp.clojure/pretty-ns, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 16, :method-params ([p p__11047]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [head ns-sym & more]]))}, pretty-impls {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 149, :column 7, :end-line 149, :end-column 19, :arglists (quote ([p opts+specs]))}, :name fipp.clojure/pretty-impls, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 19, :method-params ([p opts+specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p opts+specs]))}, list-group {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 14, :column 7, :end-line 14, :end-column 17, :arglists (quote ([& nodes])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(nodes)], :arglists ([& nodes]), :arglists-meta (nil)}}, :name fipp.clojure/list-group, :variadic true, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(nodes)], :arglists ([& nodes]), :arglists-meta (nil)}, :method-params [(nodes)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 0, :fn-var true, :arglists ([& nodes])}, pretty-case {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/test/fipp/clojure.cljc", :line 26, :column 7, :end-line 26, :end-column 18, :arglists (quote ([p [head expr & more]]))}, :name fipp.clojure/pretty-case, :variadic false, :file "resources/public/js/test/fipp/clojure.cljc", :end-column 18, :method-params ([p p__10975]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [head expr & more]]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{& when-first cond->> :nest :align %& :group .. if-not doseq deftype when-let loop* if-some let -> doto fn when-not when some->> defn if % ns unquote or let* cond-> dotimes reify :line with-open fn* defonce defn- loop condp cond some-> for binding with-local-vars defmacro with-redefs . var quote defmulti if-let case deref defrecord and :symbols when-some def ->> :span}, :order [:nest :line :group :align & % %& :span fn* condp deref quote unquote var cond fn . .. -> ->> and doto or some-> some->> reify binding doseq dotimes for if-let if-some let let* loop loop* when-first when-let when-some with-local-vars with-open with-redefs deftype defrecord def defonce if if-not when when-not defmacro defmulti defn defn- ns case cond-> cond->> :symbols]}, :doc "Provides a pretty document serializer and pprint fn for Clojure code.\n  See fipp.edn for pretty printing Clojure/EDN data structures"}