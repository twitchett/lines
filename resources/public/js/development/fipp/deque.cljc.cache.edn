{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{concat empty}, :name fipp.deque, :imports nil, :requires {rrb clojure.core.rrb-vector, clojure.core.rrb-vector clojure.core.rrb-vector}, :cljs.spec/speced-vars [], :uses nil, :defs {create {:name fipp.deque/create, :file "resources/public/js/development/fipp/deque.cljc", :line 6, :column 1, :end-line 6, :end-column 12, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/development/fipp/deque.cljc", :line 6, :column 6, :end-line 6, :end-column 12}}, empty {:name fipp.deque/empty, :file "resources/public/js/development/fipp/deque.cljc", :line 8, :column 1, :end-line 8, :end-column 11, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/development/fipp/deque.cljc", :line 8, :column 6, :end-line 8, :end-column 11}, :tag cljs.core/IVector}, popl {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/development/fipp/deque.cljc", :line 10, :column 7, :end-line 10, :end-column 11, :arglists (quote ([v]))}, :name fipp.deque/popl, :variadic false, :file "resources/public/js/development/fipp/deque.cljc", :end-column 11, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, conjr {:name fipp.deque/conjr, :file "resources/public/js/development/fipp/deque.cljc", :line 13, :column 1, :end-line 13, :end-column 11, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/development/fipp/deque.cljc", :line 13, :column 6, :end-line 13, :end-column 11}, :tag any}, conjlr {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/development/fipp/deque.cljc", :line 15, :column 7, :end-line 15, :end-column 13, :arglists (quote ([l deque r]))}, :name fipp.deque/conjlr, :variadic false, :file "resources/public/js/development/fipp/deque.cljc", :end-column 13, :method-params ([l deque r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 3, :fn-var true, :arglists (quote ([l deque r]))}, concat {:name fipp.deque/concat, :file "resources/public/js/development/fipp/deque.cljc", :line 18, :column 1, :end-line 18, :end-column 12, :meta {:file "/home/tabi/dev/repos/making-art/lines/resources/public/js/development/fipp/deque.cljc", :line 18, :column 6, :end-line 18, :end-column 12}}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "Double-sided queue built on rrb vectors."}