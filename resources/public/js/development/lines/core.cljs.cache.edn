{:rename-macros {}, :renames {}, :use-macros {defsketch quil.core, random quil.core}, :excludes #{}, :name lines.core, :imports nil, :requires {q quil.core, quil.core quil.core, m quil.middleware, quil.middleware quil.middleware, gstring goog.string, goog.string goog.string, goog.string.format goog.string.format}, :cljs.spec/speced-vars [], :uses nil, :defs {draw-state {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/src/lines/core.cljs", :line 100, :column 7, :end-line 100, :end-column 17, :arglists (quote ([{:keys [x y c x1 y1 x2 y2 bx1 by1 bx2 by2], :as state}]))}, :name lines.core/draw-state, :variadic false, :file "src/lines/core.cljs", :end-column 17, :method-params ([p__11050]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [x y c x1 y1 x2 y2 bx1 by1 bx2 by2], :as state}]))}, c-distance {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/src/lines/core.cljs", :line 22, :column 7, :end-line 22, :end-column 17, :arglists (quote ([c1 c2]))}, :name lines.core/c-distance, :variadic false, :file "src/lines/core.cljs", :end-column 17, :method-params ([c1 c2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c1 c2]))}, update-state {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/src/lines/core.cljs", :line 82, :column 7, :end-line 82, :end-column 19, :arglists (quote ([{:keys [x y c c1 x1 y1 x2 y2 c2 bx1 by1 bx2 by2 t c-step n], :as state}]))}, :name lines.core/update-state, :variadic false, :file "src/lines/core.cljs", :end-column 19, :method-params ([p__11047]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [x y c c1 x1 y1 x2 y2 c2 bx1 by1 bx2 by2 t c-step n], :as state}]))}, height {:name lines.core/height, :file "src/lines/core.cljs", :line 9, :column 1, :end-line 9, :end-column 12, :meta {:file "/home/tabi/dev/repos/making-art/lines/src/lines/core.cljs", :line 9, :column 6, :end-line 9, :end-column 12}, :tag number}, run-sketch {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/src/lines/core.cljs", :line 122, :column 16, :end-line 122, :end-column 26, :export true, :arglists (quote ([]))}, :name lines.core/run-sketch, :variadic false, :file "src/lines/core.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, frame-rate {:name lines.core/frame-rate, :file "src/lines/core.cljs", :line 10, :column 1, :end-line 10, :end-column 16, :meta {:file "/home/tabi/dev/repos/making-art/lines/src/lines/core.cljs", :line 10, :column 6, :end-line 10, :end-column 16}, :tag number}, fmt {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/src/lines/core.cljs", :line 17, :column 7, :end-line 17, :end-column 10, :arglists (quote ([s]))}, :name lines.core/fmt, :variadic false, :file "src/lines/core.cljs", :end-column 10, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, new-state {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/src/lines/core.cljs", :line 34, :column 7, :end-line 34, :end-column 16, :arglists (quote ([s]))}, :name lines.core/new-state, :variadic false, :file "src/lines/core.cljs", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, rtest {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/src/lines/core.cljs", :line 27, :column 7, :end-line 27, :end-column 12, :arglists (quote ([]))}, :name lines.core/rtest, :variadic false, :file "src/lines/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, t-step {:name lines.core/t-step, :file "src/lines/core.cljs", :line 11, :column 1, :end-line 11, :end-column 12, :meta {:file "/home/tabi/dev/repos/making-art/lines/src/lines/core.cljs", :line 11, :column 6, :end-line 11, :end-column 12}, :tag number}, width {:name lines.core/width, :file "src/lines/core.cljs", :line 8, :column 1, :end-line 8, :end-column 11, :meta {:file "/home/tabi/dev/repos/making-art/lines/src/lines/core.cljs", :line 8, :column 6, :end-line 8, :end-column 11}, :tag number}, lines {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/src/lines/core.cljs", :line 123, :column 16, :end-line 123, :end-column 21, :export true, :arglists (quote ([]))}, :name lines.core/lines, :variadic false, :file "src/lines/core.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 3, :line 123, :end-line 123, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, setup {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/src/lines/core.cljs", :line 66, :column 7, :end-line 66, :end-column 12, :arglists (quote ([]))}, :name lines.core/setup, :variadic false, :file "src/lines/core.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, increase-hue {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/src/lines/core.cljs", :line 74, :column 7, :end-line 74, :end-column 19, :arglists (quote ([c step]))}, :name lines.core/increase-hue, :variadic false, :file "src/lines/core.cljs", :end-column 19, :method-params ([c step]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([c step]))}, abs {:protocol-inline nil, :meta {:file "/home/tabi/dev/repos/making-art/lines/src/lines/core.cljs", :line 14, :column 7, :end-line 14, :end-column 10, :arglists (quote ([n]))}, :name lines.core/abs, :variadic false, :file "src/lines/core.cljs", :end-column 10, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([n]))}}, :cljs.spec/registry-ref [], :require-macros {q quil.core, quil.core quil.core}, :cljs.analyzer/constants {:seen #{:y :by2 :c-end :bx2 :hsb :fn :c-dist :y-start :c-start :n :y1 :update :c2 :x-start :size :setup :middleware :c :host :c1 :bx1 :host-id :no-start :by1 :t :x :x1 :draw :y2 :c-step :x2}, :order [:x-start :y-start :c-start :c-end :y :by2 :bx2 :c-dist :n :y1 :c2 :c :c1 :bx1 :by1 :t :x :x1 :y2 :c-step :x2 :hsb :host :update :size :setup :middleware :draw :no-start :fn :host-id]}, :doc nil}